/**
 * 接口文档
 * Version: __0.0.1__
 *
 * OpenAPI spec version: 0.0.1
 * Contact: binghuiluo@tencent.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/internal/Observable';

import { Company } from '../model/company';
import { InlineResponse2001 } from '../model/inlineResponse2001';
import { InlineResponse2002 } from '../model/inlineResponse2002';
import { InlineResponse2003 } from '../model/inlineResponse2003';
import { Person } from '../model/person';
import { SaveSupplierCategoryModel } from '../model/saveSupplierCategoryModel';
import { SaveSupplierStyleModel } from '../model/saveSupplierStyleModel';
import { SupplierWorksModel } from '../model/supplierWorksModel';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class SupplierService {

    protected basePath = 'http://qq.cpm.cm.com:8080';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 保存注册基本信息
     * 返回树状结构base-info数据
     * @param data data
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public webSupplierBaseInfoCompanyPost(data: Company, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public webSupplierBaseInfoCompanyPost(data: Company, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public webSupplierBaseInfoCompanyPost(data: Company, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public webSupplierBaseInfoCompanyPost(data: Company, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (data === null || data === undefined) {
            throw new Error('Required parameter data was null or undefined when calling webSupplierBaseInfoCompanyPost.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/web/supplier/base-info/company`,
            data,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 获取注册基本信息
     * 返回树状结构base-info数据
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public webSupplierBaseInfoGet(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public webSupplierBaseInfoGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public webSupplierBaseInfoGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public webSupplierBaseInfoGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/web/supplier/base-info`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 保存注册基本信息
     * 返回树状结构base-info数据
     * @param data data
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public webSupplierBaseInfoPersonPost(data: Person, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public webSupplierBaseInfoPersonPost(data: Person, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public webSupplierBaseInfoPersonPost(data: Person, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public webSupplierBaseInfoPersonPost(data: Person, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (data === null || data === undefined) {
            throw new Error('Required parameter data was null or undefined when calling webSupplierBaseInfoPersonPost.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/web/supplier/base-info/person`,
            data,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 获取供应商已选择分类id
     * 返回获取供应商已选择分类id列表
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public webSupplierCategoriesGet(observe?: 'body', reportProgress?: boolean): Observable<Array<number>>;
    public webSupplierCategoriesGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<number>>>;
    public webSupplierCategoriesGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<number>>>;
    public webSupplierCategoriesGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<number>>(`${this.basePath}/web/supplier/categories`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 保存供应商已选择分类id
     * 返回获取供应商已选择分类id列表
     * @param categoryIdList category id list
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public webSupplierCategoriesPost(categoryIdList: SaveSupplierCategoryModel, observe?: 'body', reportProgress?: boolean): Observable<Array<number>>;
    public webSupplierCategoriesPost(categoryIdList: SaveSupplierCategoryModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<number>>>;
    public webSupplierCategoriesPost(categoryIdList: SaveSupplierCategoryModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<number>>>;
    public webSupplierCategoriesPost(categoryIdList: SaveSupplierCategoryModel, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (categoryIdList === null || categoryIdList === undefined) {
            throw new Error('Required parameter categoryIdList was null or undefined when calling webSupplierCategoriesPost.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<Array<number>>(`${this.basePath}/web/supplier/categories`,
            categoryIdList,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 供应商注册提交
     * 供应商注册提交
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public webSupplierRegisterPost(observe?: 'body', reportProgress?: boolean): Observable<InlineResponse2003>;
    public webSupplierRegisterPost(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse2003>>;
    public webSupplierRegisterPost(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse2003>>;
    public webSupplierRegisterPost(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.post<InlineResponse2003>(`${this.basePath}/web/supplier/register`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 获取供应商已选择风格id
     * 返回获取供应商已选择风格id列表
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public webSupplierStylesGet(observe?: 'body', reportProgress?: boolean): Observable<Array<number>>;
    public webSupplierStylesGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<number>>>;
    public webSupplierStylesGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<number>>>;
    public webSupplierStylesGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<number>>(`${this.basePath}/web/supplier/styles`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 保存供应商已选择风格id
     * 返回获取供应商已选择风格id列表
     * @param styleIdList style id list
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public webSupplierStylesPost(styleIdList: SaveSupplierStyleModel, observe?: 'body', reportProgress?: boolean): Observable<Array<number>>;
    public webSupplierStylesPost(styleIdList: SaveSupplierStyleModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<number>>>;
    public webSupplierStylesPost(styleIdList: SaveSupplierStyleModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<number>>>;
    public webSupplierStylesPost(styleIdList: SaveSupplierStyleModel, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (styleIdList === null || styleIdList === undefined) {
            throw new Error('Required parameter styleIdList was null or undefined when calling webSupplierStylesPost.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<Array<number>>(`${this.basePath}/web/supplier/styles`,
            styleIdList,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 获取供应商已上传作品列表
     * 获取供应商已上传作品列表
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public webSupplierWorksGet(observe?: 'body', reportProgress?: boolean): Observable<InlineResponse2001>;
    public webSupplierWorksGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse2001>>;
    public webSupplierWorksGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse2001>>;
    public webSupplierWorksGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<InlineResponse2001>(`${this.basePath}/web/supplier/works`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 保存供应商作品
     * 保存供应商作品
     * @param supplierWorksModel SupplierWorksModel
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public webSupplierWorksPost(supplierWorksModel: Array<SupplierWorksModel>, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse2002>;
    public webSupplierWorksPost(supplierWorksModel: Array<SupplierWorksModel>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse2002>>;
    public webSupplierWorksPost(supplierWorksModel: Array<SupplierWorksModel>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse2002>>;
    public webSupplierWorksPost(supplierWorksModel: Array<SupplierWorksModel>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (supplierWorksModel === null || supplierWorksModel === undefined) {
            throw new Error('Required parameter supplierWorksModel was null or undefined when calling webSupplierWorksPost.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<InlineResponse2002>(`${this.basePath}/web/supplier/works`,
            supplierWorksModel,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
